// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: aserto/tenant/registry/v1/registry.proto

package registry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Registry_ListOrgs_FullMethodName                   = "/aserto.tenant.registry.v1.Registry/ListOrgs"
	Registry_ListRegistryRepos_FullMethodName          = "/aserto.tenant.registry.v1.Registry/ListRegistryRepos"
	Registry_DeleteRegistryRepo_FullMethodName         = "/aserto.tenant.registry.v1.Registry/DeleteRegistryRepo"
	Registry_ListRegistryRepoTags_FullMethodName       = "/aserto.tenant.registry.v1.Registry/ListRegistryRepoTags"
	Registry_ListRegistryRepoDigests_FullMethodName    = "/aserto.tenant.registry.v1.Registry/ListRegistryRepoDigests"
	Registry_GetRegistryRepoTag_FullMethodName         = "/aserto.tenant.registry.v1.Registry/GetRegistryRepoTag"
	Registry_CreateRegistryRepo_FullMethodName         = "/aserto.tenant.registry.v1.Registry/CreateRegistryRepo"
	Registry_RegistryRepoAvailable_FullMethodName      = "/aserto.tenant.registry.v1.Registry/RegistryRepoAvailable"
	Registry_ValidPolicyRegistryRepoTag_FullMethodName = "/aserto.tenant.registry.v1.Registry/ValidPolicyRegistryRepoTag"
	Registry_CloneRepo_FullMethodName                  = "/aserto.tenant.registry.v1.Registry/CloneRepo"
)

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryClient interface {
	ListOrgs(ctx context.Context, in *ListOrgsRequest, opts ...grpc.CallOption) (*ListOrgsResponse, error)
	ListRegistryRepos(ctx context.Context, in *ListRegistryReposRequest, opts ...grpc.CallOption) (*ListRegistryReposResponse, error)
	DeleteRegistryRepo(ctx context.Context, in *DeleteRegistryRepoRequest, opts ...grpc.CallOption) (*DeleteRegistryRepoResponse, error)
	ListRegistryRepoTags(ctx context.Context, in *ListRegistryRepoTagsRequest, opts ...grpc.CallOption) (*ListRegistryRepoTagsResponse, error)
	ListRegistryRepoDigests(ctx context.Context, in *ListRegistryRepoDigestsRequest, opts ...grpc.CallOption) (*ListRegistryRepoDigestsResponse, error)
	GetRegistryRepoTag(ctx context.Context, in *GetRegistryRepoTagRequest, opts ...grpc.CallOption) (*GetRegistryRepoTagResponse, error)
	CreateRegistryRepo(ctx context.Context, in *CreateRegistryRepoRequest, opts ...grpc.CallOption) (*CreateRegistryRepoResponse, error)
	RegistryRepoAvailable(ctx context.Context, in *RegistryRepoAvailableRequest, opts ...grpc.CallOption) (*RegistryRepoAvailableResponse, error)
	ValidPolicyRegistryRepoTag(ctx context.Context, in *ValidPolicyRegistryRepoTagRequest, opts ...grpc.CallOption) (*ValidPolicyRegistryRepoTagResponse, error)
	CloneRepo(ctx context.Context, in *CloneRepoRequest, opts ...grpc.CallOption) (*CloneRepoResponse, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) ListOrgs(ctx context.Context, in *ListOrgsRequest, opts ...grpc.CallOption) (*ListOrgsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrgsResponse)
	err := c.cc.Invoke(ctx, Registry_ListOrgs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListRegistryRepos(ctx context.Context, in *ListRegistryReposRequest, opts ...grpc.CallOption) (*ListRegistryReposResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRegistryReposResponse)
	err := c.cc.Invoke(ctx, Registry_ListRegistryRepos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DeleteRegistryRepo(ctx context.Context, in *DeleteRegistryRepoRequest, opts ...grpc.CallOption) (*DeleteRegistryRepoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRegistryRepoResponse)
	err := c.cc.Invoke(ctx, Registry_DeleteRegistryRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListRegistryRepoTags(ctx context.Context, in *ListRegistryRepoTagsRequest, opts ...grpc.CallOption) (*ListRegistryRepoTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRegistryRepoTagsResponse)
	err := c.cc.Invoke(ctx, Registry_ListRegistryRepoTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListRegistryRepoDigests(ctx context.Context, in *ListRegistryRepoDigestsRequest, opts ...grpc.CallOption) (*ListRegistryRepoDigestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRegistryRepoDigestsResponse)
	err := c.cc.Invoke(ctx, Registry_ListRegistryRepoDigests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetRegistryRepoTag(ctx context.Context, in *GetRegistryRepoTagRequest, opts ...grpc.CallOption) (*GetRegistryRepoTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRegistryRepoTagResponse)
	err := c.cc.Invoke(ctx, Registry_GetRegistryRepoTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) CreateRegistryRepo(ctx context.Context, in *CreateRegistryRepoRequest, opts ...grpc.CallOption) (*CreateRegistryRepoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRegistryRepoResponse)
	err := c.cc.Invoke(ctx, Registry_CreateRegistryRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) RegistryRepoAvailable(ctx context.Context, in *RegistryRepoAvailableRequest, opts ...grpc.CallOption) (*RegistryRepoAvailableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegistryRepoAvailableResponse)
	err := c.cc.Invoke(ctx, Registry_RegistryRepoAvailable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ValidPolicyRegistryRepoTag(ctx context.Context, in *ValidPolicyRegistryRepoTagRequest, opts ...grpc.CallOption) (*ValidPolicyRegistryRepoTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidPolicyRegistryRepoTagResponse)
	err := c.cc.Invoke(ctx, Registry_ValidPolicyRegistryRepoTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) CloneRepo(ctx context.Context, in *CloneRepoRequest, opts ...grpc.CallOption) (*CloneRepoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloneRepoResponse)
	err := c.cc.Invoke(ctx, Registry_CloneRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
// All implementations should embed UnimplementedRegistryServer
// for forward compatibility
type RegistryServer interface {
	ListOrgs(context.Context, *ListOrgsRequest) (*ListOrgsResponse, error)
	ListRegistryRepos(context.Context, *ListRegistryReposRequest) (*ListRegistryReposResponse, error)
	DeleteRegistryRepo(context.Context, *DeleteRegistryRepoRequest) (*DeleteRegistryRepoResponse, error)
	ListRegistryRepoTags(context.Context, *ListRegistryRepoTagsRequest) (*ListRegistryRepoTagsResponse, error)
	ListRegistryRepoDigests(context.Context, *ListRegistryRepoDigestsRequest) (*ListRegistryRepoDigestsResponse, error)
	GetRegistryRepoTag(context.Context, *GetRegistryRepoTagRequest) (*GetRegistryRepoTagResponse, error)
	CreateRegistryRepo(context.Context, *CreateRegistryRepoRequest) (*CreateRegistryRepoResponse, error)
	RegistryRepoAvailable(context.Context, *RegistryRepoAvailableRequest) (*RegistryRepoAvailableResponse, error)
	ValidPolicyRegistryRepoTag(context.Context, *ValidPolicyRegistryRepoTagRequest) (*ValidPolicyRegistryRepoTagResponse, error)
	CloneRepo(context.Context, *CloneRepoRequest) (*CloneRepoResponse, error)
}

// UnimplementedRegistryServer should be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (UnimplementedRegistryServer) ListOrgs(context.Context, *ListOrgsRequest) (*ListOrgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgs not implemented")
}
func (UnimplementedRegistryServer) ListRegistryRepos(context.Context, *ListRegistryReposRequest) (*ListRegistryReposResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistryRepos not implemented")
}
func (UnimplementedRegistryServer) DeleteRegistryRepo(context.Context, *DeleteRegistryRepoRequest) (*DeleteRegistryRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegistryRepo not implemented")
}
func (UnimplementedRegistryServer) ListRegistryRepoTags(context.Context, *ListRegistryRepoTagsRequest) (*ListRegistryRepoTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistryRepoTags not implemented")
}
func (UnimplementedRegistryServer) ListRegistryRepoDigests(context.Context, *ListRegistryRepoDigestsRequest) (*ListRegistryRepoDigestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistryRepoDigests not implemented")
}
func (UnimplementedRegistryServer) GetRegistryRepoTag(context.Context, *GetRegistryRepoTagRequest) (*GetRegistryRepoTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistryRepoTag not implemented")
}
func (UnimplementedRegistryServer) CreateRegistryRepo(context.Context, *CreateRegistryRepoRequest) (*CreateRegistryRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistryRepo not implemented")
}
func (UnimplementedRegistryServer) RegistryRepoAvailable(context.Context, *RegistryRepoAvailableRequest) (*RegistryRepoAvailableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistryRepoAvailable not implemented")
}
func (UnimplementedRegistryServer) ValidPolicyRegistryRepoTag(context.Context, *ValidPolicyRegistryRepoTagRequest) (*ValidPolicyRegistryRepoTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidPolicyRegistryRepoTag not implemented")
}
func (UnimplementedRegistryServer) CloneRepo(context.Context, *CloneRepoRequest) (*CloneRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneRepo not implemented")
}

// UnsafeRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServer will
// result in compilation errors.
type UnsafeRegistryServer interface {
	mustEmbedUnimplementedRegistryServer()
}

func RegisterRegistryServer(s grpc.ServiceRegistrar, srv RegistryServer) {
	s.RegisterService(&Registry_ServiceDesc, srv)
}

func _Registry_ListOrgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListOrgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_ListOrgs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListOrgs(ctx, req.(*ListOrgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListRegistryRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegistryReposRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListRegistryRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_ListRegistryRepos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListRegistryRepos(ctx, req.(*ListRegistryReposRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_DeleteRegistryRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistryRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DeleteRegistryRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_DeleteRegistryRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DeleteRegistryRepo(ctx, req.(*DeleteRegistryRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListRegistryRepoTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegistryRepoTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListRegistryRepoTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_ListRegistryRepoTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListRegistryRepoTags(ctx, req.(*ListRegistryRepoTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListRegistryRepoDigests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegistryRepoDigestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListRegistryRepoDigests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_ListRegistryRepoDigests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListRegistryRepoDigests(ctx, req.(*ListRegistryRepoDigestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetRegistryRepoTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistryRepoTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetRegistryRepoTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_GetRegistryRepoTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetRegistryRepoTag(ctx, req.(*GetRegistryRepoTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_CreateRegistryRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistryRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).CreateRegistryRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_CreateRegistryRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).CreateRegistryRepo(ctx, req.(*CreateRegistryRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_RegistryRepoAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryRepoAvailableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).RegistryRepoAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_RegistryRepoAvailable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).RegistryRepoAvailable(ctx, req.(*RegistryRepoAvailableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ValidPolicyRegistryRepoTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidPolicyRegistryRepoTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ValidPolicyRegistryRepoTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_ValidPolicyRegistryRepoTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ValidPolicyRegistryRepoTag(ctx, req.(*ValidPolicyRegistryRepoTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_CloneRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).CloneRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_CloneRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).CloneRepo(ctx, req.(*CloneRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Registry_ServiceDesc is the grpc.ServiceDesc for Registry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aserto.tenant.registry.v1.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrgs",
			Handler:    _Registry_ListOrgs_Handler,
		},
		{
			MethodName: "ListRegistryRepos",
			Handler:    _Registry_ListRegistryRepos_Handler,
		},
		{
			MethodName: "DeleteRegistryRepo",
			Handler:    _Registry_DeleteRegistryRepo_Handler,
		},
		{
			MethodName: "ListRegistryRepoTags",
			Handler:    _Registry_ListRegistryRepoTags_Handler,
		},
		{
			MethodName: "ListRegistryRepoDigests",
			Handler:    _Registry_ListRegistryRepoDigests_Handler,
		},
		{
			MethodName: "GetRegistryRepoTag",
			Handler:    _Registry_GetRegistryRepoTag_Handler,
		},
		{
			MethodName: "CreateRegistryRepo",
			Handler:    _Registry_CreateRegistryRepo_Handler,
		},
		{
			MethodName: "RegistryRepoAvailable",
			Handler:    _Registry_RegistryRepoAvailable_Handler,
		},
		{
			MethodName: "ValidPolicyRegistryRepoTag",
			Handler:    _Registry_ValidPolicyRegistryRepoTag_Handler,
		},
		{
			MethodName: "CloneRepo",
			Handler:    _Registry_CloneRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aserto/tenant/registry/v1/registry.proto",
}
