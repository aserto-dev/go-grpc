// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package remote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteClient is the client API for Remote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteClient interface {
	CommandStream(ctx context.Context, opts ...grpc.CallOption) (Remote_CommandStreamClient, error)
}

type remoteClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteClient(cc grpc.ClientConnInterface) RemoteClient {
	return &remoteClient{cc}
}

func (c *remoteClient) CommandStream(ctx context.Context, opts ...grpc.CallOption) (Remote_CommandStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Remote_ServiceDesc.Streams[0], "/aserto.remote.v1.Remote/CommandStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteCommandStreamClient{stream}
	return x, nil
}

type Remote_CommandStreamClient interface {
	Send(*CommandStreamToServer) error
	Recv() (*CommandStreamToClient, error)
	grpc.ClientStream
}

type remoteCommandStreamClient struct {
	grpc.ClientStream
}

func (x *remoteCommandStreamClient) Send(m *CommandStreamToServer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteCommandStreamClient) Recv() (*CommandStreamToClient, error) {
	m := new(CommandStreamToClient)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteServer is the server API for Remote service.
// All implementations should embed UnimplementedRemoteServer
// for forward compatibility
type RemoteServer interface {
	CommandStream(Remote_CommandStreamServer) error
}

// UnimplementedRemoteServer should be embedded to have forward compatible implementations.
type UnimplementedRemoteServer struct {
}

func (UnimplementedRemoteServer) CommandStream(Remote_CommandStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CommandStream not implemented")
}

// UnsafeRemoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteServer will
// result in compilation errors.
type UnsafeRemoteServer interface {
	mustEmbedUnimplementedRemoteServer()
}

func RegisterRemoteServer(s grpc.ServiceRegistrar, srv RemoteServer) {
	s.RegisterService(&Remote_ServiceDesc, srv)
}

func _Remote_CommandStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteServer).CommandStream(&remoteCommandStreamServer{stream})
}

type Remote_CommandStreamServer interface {
	Send(*CommandStreamToClient) error
	Recv() (*CommandStreamToServer, error)
	grpc.ServerStream
}

type remoteCommandStreamServer struct {
	grpc.ServerStream
}

func (x *remoteCommandStreamServer) Send(m *CommandStreamToClient) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteCommandStreamServer) Recv() (*CommandStreamToServer, error) {
	m := new(CommandStreamToServer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Remote_ServiceDesc is the grpc.ServiceDesc for Remote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Remote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aserto.remote.v1.Remote",
	HandlerType: (*RemoteServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommandStream",
			Handler:       _Remote_CommandStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "aserto/remote/v1/remote.proto",
}
