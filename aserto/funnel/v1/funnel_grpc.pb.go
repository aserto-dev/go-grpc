// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package funnel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FunnelClient is the client API for Funnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FunnelClient interface {
	StartWorkflow(ctx context.Context, in *StartWorkflowRequest, opts ...grpc.CallOption) (*StartWorkflowResponse, error)
	StopWorkflow(ctx context.Context, in *StopWorkflowRequest, opts ...grpc.CallOption) (*StopWorkflowResponse, error)
	ListenWorkflow(ctx context.Context, in *ListenWorkflowRequest, opts ...grpc.CallOption) (Funnel_ListenWorkflowClient, error)
}

type funnelClient struct {
	cc grpc.ClientConnInterface
}

func NewFunnelClient(cc grpc.ClientConnInterface) FunnelClient {
	return &funnelClient{cc}
}

func (c *funnelClient) StartWorkflow(ctx context.Context, in *StartWorkflowRequest, opts ...grpc.CallOption) (*StartWorkflowResponse, error) {
	out := new(StartWorkflowResponse)
	err := c.cc.Invoke(ctx, "/aserto.funnel.v1.Funnel/StartWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funnelClient) StopWorkflow(ctx context.Context, in *StopWorkflowRequest, opts ...grpc.CallOption) (*StopWorkflowResponse, error) {
	out := new(StopWorkflowResponse)
	err := c.cc.Invoke(ctx, "/aserto.funnel.v1.Funnel/StopWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *funnelClient) ListenWorkflow(ctx context.Context, in *ListenWorkflowRequest, opts ...grpc.CallOption) (Funnel_ListenWorkflowClient, error) {
	stream, err := c.cc.NewStream(ctx, &Funnel_ServiceDesc.Streams[0], "/aserto.funnel.v1.Funnel/ListenWorkflow", opts...)
	if err != nil {
		return nil, err
	}
	x := &funnelListenWorkflowClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Funnel_ListenWorkflowClient interface {
	Recv() (*ListenWorkflowResponse, error)
	grpc.ClientStream
}

type funnelListenWorkflowClient struct {
	grpc.ClientStream
}

func (x *funnelListenWorkflowClient) Recv() (*ListenWorkflowResponse, error) {
	m := new(ListenWorkflowResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FunnelServer is the server API for Funnel service.
// All implementations should embed UnimplementedFunnelServer
// for forward compatibility
type FunnelServer interface {
	StartWorkflow(context.Context, *StartWorkflowRequest) (*StartWorkflowResponse, error)
	StopWorkflow(context.Context, *StopWorkflowRequest) (*StopWorkflowResponse, error)
	ListenWorkflow(*ListenWorkflowRequest, Funnel_ListenWorkflowServer) error
}

// UnimplementedFunnelServer should be embedded to have forward compatible implementations.
type UnimplementedFunnelServer struct {
}

func (UnimplementedFunnelServer) StartWorkflow(context.Context, *StartWorkflowRequest) (*StartWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorkflow not implemented")
}
func (UnimplementedFunnelServer) StopWorkflow(context.Context, *StopWorkflowRequest) (*StopWorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWorkflow not implemented")
}
func (UnimplementedFunnelServer) ListenWorkflow(*ListenWorkflowRequest, Funnel_ListenWorkflowServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenWorkflow not implemented")
}

// UnsafeFunnelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FunnelServer will
// result in compilation errors.
type UnsafeFunnelServer interface {
	mustEmbedUnimplementedFunnelServer()
}

func RegisterFunnelServer(s grpc.ServiceRegistrar, srv FunnelServer) {
	s.RegisterService(&Funnel_ServiceDesc, srv)
}

func _Funnel_StartWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunnelServer).StartWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.funnel.v1.Funnel/StartWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunnelServer).StartWorkflow(ctx, req.(*StartWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funnel_StopWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FunnelServer).StopWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aserto.funnel.v1.Funnel/StopWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FunnelServer).StopWorkflow(ctx, req.(*StopWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Funnel_ListenWorkflow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenWorkflowRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FunnelServer).ListenWorkflow(m, &funnelListenWorkflowServer{stream})
}

type Funnel_ListenWorkflowServer interface {
	Send(*ListenWorkflowResponse) error
	grpc.ServerStream
}

type funnelListenWorkflowServer struct {
	grpc.ServerStream
}

func (x *funnelListenWorkflowServer) Send(m *ListenWorkflowResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Funnel_ServiceDesc is the grpc.ServiceDesc for Funnel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Funnel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aserto.funnel.v1.Funnel",
	HandlerType: (*FunnelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartWorkflow",
			Handler:    _Funnel_StartWorkflow_Handler,
		},
		{
			MethodName: "StopWorkflow",
			Handler:    _Funnel_StopWorkflow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenWorkflow",
			Handler:       _Funnel_ListenWorkflow_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "aserto/funnel/v1/funnel.proto",
}
