// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: aserto/scribe/v2/scribe.proto

package scribe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScribeClient is the client API for Scribe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScribeClient interface {
	WriteBatch(ctx context.Context, opts ...grpc.CallOption) (Scribe_WriteBatchClient, error)
}

type scribeClient struct {
	cc grpc.ClientConnInterface
}

func NewScribeClient(cc grpc.ClientConnInterface) ScribeClient {
	return &scribeClient{cc}
}

func (c *scribeClient) WriteBatch(ctx context.Context, opts ...grpc.CallOption) (Scribe_WriteBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Scribe_ServiceDesc.Streams[0], "/aserto.scribe.v2.Scribe/WriteBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &scribeWriteBatchClient{stream}
	return x, nil
}

type Scribe_WriteBatchClient interface {
	Send(*WriteBatchRequest) error
	Recv() (*WriteBatchResponse, error)
	grpc.ClientStream
}

type scribeWriteBatchClient struct {
	grpc.ClientStream
}

func (x *scribeWriteBatchClient) Send(m *WriteBatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scribeWriteBatchClient) Recv() (*WriteBatchResponse, error) {
	m := new(WriteBatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScribeServer is the server API for Scribe service.
// All implementations should embed UnimplementedScribeServer
// for forward compatibility
type ScribeServer interface {
	WriteBatch(Scribe_WriteBatchServer) error
}

// UnimplementedScribeServer should be embedded to have forward compatible implementations.
type UnimplementedScribeServer struct {
}

func (UnimplementedScribeServer) WriteBatch(Scribe_WriteBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteBatch not implemented")
}

// UnsafeScribeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScribeServer will
// result in compilation errors.
type UnsafeScribeServer interface {
	mustEmbedUnimplementedScribeServer()
}

func RegisterScribeServer(s grpc.ServiceRegistrar, srv ScribeServer) {
	s.RegisterService(&Scribe_ServiceDesc, srv)
}

func _Scribe_WriteBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScribeServer).WriteBatch(&scribeWriteBatchServer{stream})
}

type Scribe_WriteBatchServer interface {
	Send(*WriteBatchResponse) error
	Recv() (*WriteBatchRequest, error)
	grpc.ServerStream
}

type scribeWriteBatchServer struct {
	grpc.ServerStream
}

func (x *scribeWriteBatchServer) Send(m *WriteBatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scribeWriteBatchServer) Recv() (*WriteBatchRequest, error) {
	m := new(WriteBatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Scribe_ServiceDesc is the grpc.ServiceDesc for Scribe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Scribe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aserto.scribe.v2.Scribe",
	HandlerType: (*ScribeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WriteBatch",
			Handler:       _Scribe_WriteBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "aserto/scribe/v2/scribe.proto",
}
