// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: aserto/authorizer/directory/v1/directory.proto

package directory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Directory_ListUsers_FullMethodName             = "/aserto.authorizer.directory.v1.Directory/ListUsers"
	Directory_GetUser_FullMethodName               = "/aserto.authorizer.directory.v1.Directory/GetUser"
	Directory_GetIdentity_FullMethodName           = "/aserto.authorizer.directory.v1.Directory/GetIdentity"
	Directory_CreateUser_FullMethodName            = "/aserto.authorizer.directory.v1.Directory/CreateUser"
	Directory_UpdateUser_FullMethodName            = "/aserto.authorizer.directory.v1.Directory/UpdateUser"
	Directory_DeleteUser_FullMethodName            = "/aserto.authorizer.directory.v1.Directory/DeleteUser"
	Directory_ListTenants_FullMethodName           = "/aserto.authorizer.directory.v1.Directory/ListTenants"
	Directory_CreateTenant_FullMethodName          = "/aserto.authorizer.directory.v1.Directory/CreateTenant"
	Directory_DeleteTenant_FullMethodName          = "/aserto.authorizer.directory.v1.Directory/DeleteTenant"
	Directory_LoadUsers_FullMethodName             = "/aserto.authorizer.directory.v1.Directory/LoadUsers"
	Directory_ListResources_FullMethodName         = "/aserto.authorizer.directory.v1.Directory/ListResources"
	Directory_GetResource_FullMethodName           = "/aserto.authorizer.directory.v1.Directory/GetResource"
	Directory_SetResource_FullMethodName           = "/aserto.authorizer.directory.v1.Directory/SetResource"
	Directory_DeleteResource_FullMethodName        = "/aserto.authorizer.directory.v1.Directory/DeleteResource"
	Directory_GetUserProperties_FullMethodName     = "/aserto.authorizer.directory.v1.Directory/GetUserProperties"
	Directory_SetUserProperties_FullMethodName     = "/aserto.authorizer.directory.v1.Directory/SetUserProperties"
	Directory_SetUserProperty_FullMethodName       = "/aserto.authorizer.directory.v1.Directory/SetUserProperty"
	Directory_DeleteUserProperty_FullMethodName    = "/aserto.authorizer.directory.v1.Directory/DeleteUserProperty"
	Directory_GetUserRoles_FullMethodName          = "/aserto.authorizer.directory.v1.Directory/GetUserRoles"
	Directory_SetUserRoles_FullMethodName          = "/aserto.authorizer.directory.v1.Directory/SetUserRoles"
	Directory_SetUserRole_FullMethodName           = "/aserto.authorizer.directory.v1.Directory/SetUserRole"
	Directory_DeleteUserRole_FullMethodName        = "/aserto.authorizer.directory.v1.Directory/DeleteUserRole"
	Directory_GetUserPermissions_FullMethodName    = "/aserto.authorizer.directory.v1.Directory/GetUserPermissions"
	Directory_SetUserPermissions_FullMethodName    = "/aserto.authorizer.directory.v1.Directory/SetUserPermissions"
	Directory_SetUserPermission_FullMethodName     = "/aserto.authorizer.directory.v1.Directory/SetUserPermission"
	Directory_DeleteUserPermission_FullMethodName  = "/aserto.authorizer.directory.v1.Directory/DeleteUserPermission"
	Directory_ListUserApplications_FullMethodName  = "/aserto.authorizer.directory.v1.Directory/ListUserApplications"
	Directory_DeleteUserApplication_FullMethodName = "/aserto.authorizer.directory.v1.Directory/DeleteUserApplication"
	Directory_GetApplProperties_FullMethodName     = "/aserto.authorizer.directory.v1.Directory/GetApplProperties"
	Directory_SetApplProperties_FullMethodName     = "/aserto.authorizer.directory.v1.Directory/SetApplProperties"
	Directory_SetApplProperty_FullMethodName       = "/aserto.authorizer.directory.v1.Directory/SetApplProperty"
	Directory_DeleteApplProperty_FullMethodName    = "/aserto.authorizer.directory.v1.Directory/DeleteApplProperty"
	Directory_GetApplRoles_FullMethodName          = "/aserto.authorizer.directory.v1.Directory/GetApplRoles"
	Directory_SetApplRoles_FullMethodName          = "/aserto.authorizer.directory.v1.Directory/SetApplRoles"
	Directory_SetApplRole_FullMethodName           = "/aserto.authorizer.directory.v1.Directory/SetApplRole"
	Directory_DeleteApplRole_FullMethodName        = "/aserto.authorizer.directory.v1.Directory/DeleteApplRole"
	Directory_GetApplPermissions_FullMethodName    = "/aserto.authorizer.directory.v1.Directory/GetApplPermissions"
	Directory_SetApplPermissions_FullMethodName    = "/aserto.authorizer.directory.v1.Directory/SetApplPermissions"
	Directory_SetApplPermission_FullMethodName     = "/aserto.authorizer.directory.v1.Directory/SetApplPermission"
	Directory_DeleteApplPermission_FullMethodName  = "/aserto.authorizer.directory.v1.Directory/DeleteApplPermission"
	Directory_GetValue_FullMethodName              = "/aserto.authorizer.directory.v1.Directory/GetValue"
)

// DirectoryClient is the client API for Directory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectoryClient interface {
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*GetIdentityResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error)
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error)
	DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantResponse, error)
	LoadUsers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LoadUsersRequest, LoadUsersResponse], error)
	ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	SetResource(ctx context.Context, in *SetResourceRequest, opts ...grpc.CallOption) (*SetResourceResponse, error)
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
	GetUserProperties(ctx context.Context, in *GetUserPropertiesRequest, opts ...grpc.CallOption) (*GetUserPropertiesResponse, error)
	SetUserProperties(ctx context.Context, in *SetUserPropertiesRequest, opts ...grpc.CallOption) (*SetUserPropertiesResponse, error)
	SetUserProperty(ctx context.Context, in *SetUserPropertyRequest, opts ...grpc.CallOption) (*SetUserPropertyResponse, error)
	DeleteUserProperty(ctx context.Context, in *DeleteUserPropertyRequest, opts ...grpc.CallOption) (*DeleteUserPropertyResponse, error)
	GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error)
	SetUserRoles(ctx context.Context, in *SetUserRolesRequest, opts ...grpc.CallOption) (*SetUserRolesResponse, error)
	SetUserRole(ctx context.Context, in *SetUserRoleRequest, opts ...grpc.CallOption) (*SetUserRoleResponse, error)
	DeleteUserRole(ctx context.Context, in *DeleteUserRoleRequest, opts ...grpc.CallOption) (*DeleteUserRoleResponse, error)
	GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error)
	SetUserPermissions(ctx context.Context, in *SetUserPermissionsRequest, opts ...grpc.CallOption) (*SetUserPermissionsResponse, error)
	SetUserPermission(ctx context.Context, in *SetUserPermissionRequest, opts ...grpc.CallOption) (*SetUserPermissionResponse, error)
	DeleteUserPermission(ctx context.Context, in *DeleteUserPermissionRequest, opts ...grpc.CallOption) (*DeleteUserPermissionResponse, error)
	ListUserApplications(ctx context.Context, in *ListUserApplicationsRequest, opts ...grpc.CallOption) (*ListUserApplicationsResponse, error)
	DeleteUserApplication(ctx context.Context, in *DeleteUserApplicationRequest, opts ...grpc.CallOption) (*DeleteUserApplicationResponse, error)
	GetApplProperties(ctx context.Context, in *GetApplPropertiesRequest, opts ...grpc.CallOption) (*GetApplPropertiesResponse, error)
	SetApplProperties(ctx context.Context, in *SetApplPropertiesRequest, opts ...grpc.CallOption) (*SetApplPropertiesResponse, error)
	SetApplProperty(ctx context.Context, in *SetApplPropertyRequest, opts ...grpc.CallOption) (*SetApplPropertyResponse, error)
	DeleteApplProperty(ctx context.Context, in *DeleteApplPropertyRequest, opts ...grpc.CallOption) (*DeleteApplPropertyResponse, error)
	GetApplRoles(ctx context.Context, in *GetApplRolesRequest, opts ...grpc.CallOption) (*GetApplRolesResponse, error)
	SetApplRoles(ctx context.Context, in *SetApplRolesRequest, opts ...grpc.CallOption) (*SetApplRolesResponse, error)
	SetApplRole(ctx context.Context, in *SetApplRoleRequest, opts ...grpc.CallOption) (*SetApplRoleResponse, error)
	DeleteApplRole(ctx context.Context, in *DeleteApplRoleRequest, opts ...grpc.CallOption) (*DeleteApplRoleResponse, error)
	GetApplPermissions(ctx context.Context, in *GetApplPermissionsRequest, opts ...grpc.CallOption) (*GetApplPermissionsResponse, error)
	SetApplPermissions(ctx context.Context, in *SetApplPermissionsRequest, opts ...grpc.CallOption) (*SetApplPermissionsResponse, error)
	SetApplPermission(ctx context.Context, in *SetApplPermissionRequest, opts ...grpc.CallOption) (*SetApplPermissionResponse, error)
	DeleteApplPermission(ctx context.Context, in *DeleteApplPermissionRequest, opts ...grpc.CallOption) (*DeleteApplPermissionResponse, error)
	GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error)
}

type directoryClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryClient(cc grpc.ClientConnInterface) DirectoryClient {
	return &directoryClient{cc}
}

func (c *directoryClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, Directory_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, Directory_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) GetIdentity(ctx context.Context, in *GetIdentityRequest, opts ...grpc.CallOption) (*GetIdentityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIdentityResponse)
	err := c.cc.Invoke(ctx, Directory_GetIdentity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, Directory_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, Directory_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, Directory_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, Directory_ListTenants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*CreateTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTenantResponse)
	err := c.cc.Invoke(ctx, Directory_CreateTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*DeleteTenantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTenantResponse)
	err := c.cc.Invoke(ctx, Directory_DeleteTenant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) LoadUsers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[LoadUsersRequest, LoadUsersResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Directory_ServiceDesc.Streams[0], Directory_LoadUsers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LoadUsersRequest, LoadUsersResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Directory_LoadUsersClient = grpc.ClientStreamingClient[LoadUsersRequest, LoadUsersResponse]

func (c *directoryClient) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, Directory_ListResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, Directory_GetResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetResource(ctx context.Context, in *SetResourceRequest, opts ...grpc.CallOption) (*SetResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetResourceResponse)
	err := c.cc.Invoke(ctx, Directory_SetResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, Directory_DeleteResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) GetUserProperties(ctx context.Context, in *GetUserPropertiesRequest, opts ...grpc.CallOption) (*GetUserPropertiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPropertiesResponse)
	err := c.cc.Invoke(ctx, Directory_GetUserProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetUserProperties(ctx context.Context, in *SetUserPropertiesRequest, opts ...grpc.CallOption) (*SetUserPropertiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserPropertiesResponse)
	err := c.cc.Invoke(ctx, Directory_SetUserProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetUserProperty(ctx context.Context, in *SetUserPropertyRequest, opts ...grpc.CallOption) (*SetUserPropertyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserPropertyResponse)
	err := c.cc.Invoke(ctx, Directory_SetUserProperty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteUserProperty(ctx context.Context, in *DeleteUserPropertyRequest, opts ...grpc.CallOption) (*DeleteUserPropertyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserPropertyResponse)
	err := c.cc.Invoke(ctx, Directory_DeleteUserProperty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) GetUserRoles(ctx context.Context, in *GetUserRolesRequest, opts ...grpc.CallOption) (*GetUserRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRolesResponse)
	err := c.cc.Invoke(ctx, Directory_GetUserRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetUserRoles(ctx context.Context, in *SetUserRolesRequest, opts ...grpc.CallOption) (*SetUserRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserRolesResponse)
	err := c.cc.Invoke(ctx, Directory_SetUserRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetUserRole(ctx context.Context, in *SetUserRoleRequest, opts ...grpc.CallOption) (*SetUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserRoleResponse)
	err := c.cc.Invoke(ctx, Directory_SetUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteUserRole(ctx context.Context, in *DeleteUserRoleRequest, opts ...grpc.CallOption) (*DeleteUserRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserRoleResponse)
	err := c.cc.Invoke(ctx, Directory_DeleteUserRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) GetUserPermissions(ctx context.Context, in *GetUserPermissionsRequest, opts ...grpc.CallOption) (*GetUserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPermissionsResponse)
	err := c.cc.Invoke(ctx, Directory_GetUserPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetUserPermissions(ctx context.Context, in *SetUserPermissionsRequest, opts ...grpc.CallOption) (*SetUserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserPermissionsResponse)
	err := c.cc.Invoke(ctx, Directory_SetUserPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetUserPermission(ctx context.Context, in *SetUserPermissionRequest, opts ...grpc.CallOption) (*SetUserPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserPermissionResponse)
	err := c.cc.Invoke(ctx, Directory_SetUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteUserPermission(ctx context.Context, in *DeleteUserPermissionRequest, opts ...grpc.CallOption) (*DeleteUserPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserPermissionResponse)
	err := c.cc.Invoke(ctx, Directory_DeleteUserPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) ListUserApplications(ctx context.Context, in *ListUserApplicationsRequest, opts ...grpc.CallOption) (*ListUserApplicationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserApplicationsResponse)
	err := c.cc.Invoke(ctx, Directory_ListUserApplications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteUserApplication(ctx context.Context, in *DeleteUserApplicationRequest, opts ...grpc.CallOption) (*DeleteUserApplicationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserApplicationResponse)
	err := c.cc.Invoke(ctx, Directory_DeleteUserApplication_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) GetApplProperties(ctx context.Context, in *GetApplPropertiesRequest, opts ...grpc.CallOption) (*GetApplPropertiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApplPropertiesResponse)
	err := c.cc.Invoke(ctx, Directory_GetApplProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetApplProperties(ctx context.Context, in *SetApplPropertiesRequest, opts ...grpc.CallOption) (*SetApplPropertiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetApplPropertiesResponse)
	err := c.cc.Invoke(ctx, Directory_SetApplProperties_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetApplProperty(ctx context.Context, in *SetApplPropertyRequest, opts ...grpc.CallOption) (*SetApplPropertyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetApplPropertyResponse)
	err := c.cc.Invoke(ctx, Directory_SetApplProperty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteApplProperty(ctx context.Context, in *DeleteApplPropertyRequest, opts ...grpc.CallOption) (*DeleteApplPropertyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteApplPropertyResponse)
	err := c.cc.Invoke(ctx, Directory_DeleteApplProperty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) GetApplRoles(ctx context.Context, in *GetApplRolesRequest, opts ...grpc.CallOption) (*GetApplRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApplRolesResponse)
	err := c.cc.Invoke(ctx, Directory_GetApplRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetApplRoles(ctx context.Context, in *SetApplRolesRequest, opts ...grpc.CallOption) (*SetApplRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetApplRolesResponse)
	err := c.cc.Invoke(ctx, Directory_SetApplRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetApplRole(ctx context.Context, in *SetApplRoleRequest, opts ...grpc.CallOption) (*SetApplRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetApplRoleResponse)
	err := c.cc.Invoke(ctx, Directory_SetApplRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteApplRole(ctx context.Context, in *DeleteApplRoleRequest, opts ...grpc.CallOption) (*DeleteApplRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteApplRoleResponse)
	err := c.cc.Invoke(ctx, Directory_DeleteApplRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) GetApplPermissions(ctx context.Context, in *GetApplPermissionsRequest, opts ...grpc.CallOption) (*GetApplPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApplPermissionsResponse)
	err := c.cc.Invoke(ctx, Directory_GetApplPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetApplPermissions(ctx context.Context, in *SetApplPermissionsRequest, opts ...grpc.CallOption) (*SetApplPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetApplPermissionsResponse)
	err := c.cc.Invoke(ctx, Directory_SetApplPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) SetApplPermission(ctx context.Context, in *SetApplPermissionRequest, opts ...grpc.CallOption) (*SetApplPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetApplPermissionResponse)
	err := c.cc.Invoke(ctx, Directory_SetApplPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteApplPermission(ctx context.Context, in *DeleteApplPermissionRequest, opts ...grpc.CallOption) (*DeleteApplPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteApplPermissionResponse)
	err := c.cc.Invoke(ctx, Directory_DeleteApplPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetValueResponse)
	err := c.cc.Invoke(ctx, Directory_GetValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryServer is the server API for Directory service.
// All implementations should embed UnimplementedDirectoryServer
// for forward compatibility.
type DirectoryServer interface {
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetIdentity(context.Context, *GetIdentityRequest) (*GetIdentityResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error)
	DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantResponse, error)
	LoadUsers(grpc.ClientStreamingServer[LoadUsersRequest, LoadUsersResponse]) error
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	SetResource(context.Context, *SetResourceRequest) (*SetResourceResponse, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	GetUserProperties(context.Context, *GetUserPropertiesRequest) (*GetUserPropertiesResponse, error)
	SetUserProperties(context.Context, *SetUserPropertiesRequest) (*SetUserPropertiesResponse, error)
	SetUserProperty(context.Context, *SetUserPropertyRequest) (*SetUserPropertyResponse, error)
	DeleteUserProperty(context.Context, *DeleteUserPropertyRequest) (*DeleteUserPropertyResponse, error)
	GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error)
	SetUserRoles(context.Context, *SetUserRolesRequest) (*SetUserRolesResponse, error)
	SetUserRole(context.Context, *SetUserRoleRequest) (*SetUserRoleResponse, error)
	DeleteUserRole(context.Context, *DeleteUserRoleRequest) (*DeleteUserRoleResponse, error)
	GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error)
	SetUserPermissions(context.Context, *SetUserPermissionsRequest) (*SetUserPermissionsResponse, error)
	SetUserPermission(context.Context, *SetUserPermissionRequest) (*SetUserPermissionResponse, error)
	DeleteUserPermission(context.Context, *DeleteUserPermissionRequest) (*DeleteUserPermissionResponse, error)
	ListUserApplications(context.Context, *ListUserApplicationsRequest) (*ListUserApplicationsResponse, error)
	DeleteUserApplication(context.Context, *DeleteUserApplicationRequest) (*DeleteUserApplicationResponse, error)
	GetApplProperties(context.Context, *GetApplPropertiesRequest) (*GetApplPropertiesResponse, error)
	SetApplProperties(context.Context, *SetApplPropertiesRequest) (*SetApplPropertiesResponse, error)
	SetApplProperty(context.Context, *SetApplPropertyRequest) (*SetApplPropertyResponse, error)
	DeleteApplProperty(context.Context, *DeleteApplPropertyRequest) (*DeleteApplPropertyResponse, error)
	GetApplRoles(context.Context, *GetApplRolesRequest) (*GetApplRolesResponse, error)
	SetApplRoles(context.Context, *SetApplRolesRequest) (*SetApplRolesResponse, error)
	SetApplRole(context.Context, *SetApplRoleRequest) (*SetApplRoleResponse, error)
	DeleteApplRole(context.Context, *DeleteApplRoleRequest) (*DeleteApplRoleResponse, error)
	GetApplPermissions(context.Context, *GetApplPermissionsRequest) (*GetApplPermissionsResponse, error)
	SetApplPermissions(context.Context, *SetApplPermissionsRequest) (*SetApplPermissionsResponse, error)
	SetApplPermission(context.Context, *SetApplPermissionRequest) (*SetApplPermissionResponse, error)
	DeleteApplPermission(context.Context, *DeleteApplPermissionRequest) (*DeleteApplPermissionResponse, error)
	GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error)
}

// UnimplementedDirectoryServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDirectoryServer struct{}

func (UnimplementedDirectoryServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedDirectoryServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedDirectoryServer) GetIdentity(context.Context, *GetIdentityRequest) (*GetIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentity not implemented")
}
func (UnimplementedDirectoryServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedDirectoryServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedDirectoryServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedDirectoryServer) ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedDirectoryServer) CreateTenant(context.Context, *CreateTenantRequest) (*CreateTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenant not implemented")
}
func (UnimplementedDirectoryServer) DeleteTenant(context.Context, *DeleteTenantRequest) (*DeleteTenantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedDirectoryServer) LoadUsers(grpc.ClientStreamingServer[LoadUsersRequest, LoadUsersResponse]) error {
	return status.Errorf(codes.Unimplemented, "method LoadUsers not implemented")
}
func (UnimplementedDirectoryServer) ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedDirectoryServer) GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedDirectoryServer) SetResource(context.Context, *SetResourceRequest) (*SetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetResource not implemented")
}
func (UnimplementedDirectoryServer) DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedDirectoryServer) GetUserProperties(context.Context, *GetUserPropertiesRequest) (*GetUserPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProperties not implemented")
}
func (UnimplementedDirectoryServer) SetUserProperties(context.Context, *SetUserPropertiesRequest) (*SetUserPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserProperties not implemented")
}
func (UnimplementedDirectoryServer) SetUserProperty(context.Context, *SetUserPropertyRequest) (*SetUserPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserProperty not implemented")
}
func (UnimplementedDirectoryServer) DeleteUserProperty(context.Context, *DeleteUserPropertyRequest) (*DeleteUserPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserProperty not implemented")
}
func (UnimplementedDirectoryServer) GetUserRoles(context.Context, *GetUserRolesRequest) (*GetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoles not implemented")
}
func (UnimplementedDirectoryServer) SetUserRoles(context.Context, *SetUserRolesRequest) (*SetUserRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserRoles not implemented")
}
func (UnimplementedDirectoryServer) SetUserRole(context.Context, *SetUserRoleRequest) (*SetUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserRole not implemented")
}
func (UnimplementedDirectoryServer) DeleteUserRole(context.Context, *DeleteUserRoleRequest) (*DeleteUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserRole not implemented")
}
func (UnimplementedDirectoryServer) GetUserPermissions(context.Context, *GetUserPermissionsRequest) (*GetUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissions not implemented")
}
func (UnimplementedDirectoryServer) SetUserPermissions(context.Context, *SetUserPermissionsRequest) (*SetUserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPermissions not implemented")
}
func (UnimplementedDirectoryServer) SetUserPermission(context.Context, *SetUserPermissionRequest) (*SetUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPermission not implemented")
}
func (UnimplementedDirectoryServer) DeleteUserPermission(context.Context, *DeleteUserPermissionRequest) (*DeleteUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPermission not implemented")
}
func (UnimplementedDirectoryServer) ListUserApplications(context.Context, *ListUserApplicationsRequest) (*ListUserApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserApplications not implemented")
}
func (UnimplementedDirectoryServer) DeleteUserApplication(context.Context, *DeleteUserApplicationRequest) (*DeleteUserApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserApplication not implemented")
}
func (UnimplementedDirectoryServer) GetApplProperties(context.Context, *GetApplPropertiesRequest) (*GetApplPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplProperties not implemented")
}
func (UnimplementedDirectoryServer) SetApplProperties(context.Context, *SetApplPropertiesRequest) (*SetApplPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApplProperties not implemented")
}
func (UnimplementedDirectoryServer) SetApplProperty(context.Context, *SetApplPropertyRequest) (*SetApplPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApplProperty not implemented")
}
func (UnimplementedDirectoryServer) DeleteApplProperty(context.Context, *DeleteApplPropertyRequest) (*DeleteApplPropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplProperty not implemented")
}
func (UnimplementedDirectoryServer) GetApplRoles(context.Context, *GetApplRolesRequest) (*GetApplRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplRoles not implemented")
}
func (UnimplementedDirectoryServer) SetApplRoles(context.Context, *SetApplRolesRequest) (*SetApplRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApplRoles not implemented")
}
func (UnimplementedDirectoryServer) SetApplRole(context.Context, *SetApplRoleRequest) (*SetApplRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApplRole not implemented")
}
func (UnimplementedDirectoryServer) DeleteApplRole(context.Context, *DeleteApplRoleRequest) (*DeleteApplRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplRole not implemented")
}
func (UnimplementedDirectoryServer) GetApplPermissions(context.Context, *GetApplPermissionsRequest) (*GetApplPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplPermissions not implemented")
}
func (UnimplementedDirectoryServer) SetApplPermissions(context.Context, *SetApplPermissionsRequest) (*SetApplPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApplPermissions not implemented")
}
func (UnimplementedDirectoryServer) SetApplPermission(context.Context, *SetApplPermissionRequest) (*SetApplPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApplPermission not implemented")
}
func (UnimplementedDirectoryServer) DeleteApplPermission(context.Context, *DeleteApplPermissionRequest) (*DeleteApplPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplPermission not implemented")
}
func (UnimplementedDirectoryServer) GetValue(context.Context, *GetValueRequest) (*GetValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedDirectoryServer) testEmbeddedByValue() {}

// UnsafeDirectoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectoryServer will
// result in compilation errors.
type UnsafeDirectoryServer interface {
	mustEmbedUnimplementedDirectoryServer()
}

func RegisterDirectoryServer(s grpc.ServiceRegistrar, srv DirectoryServer) {
	// If the following call pancis, it indicates UnimplementedDirectoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Directory_ServiceDesc, srv)
}

func _Directory_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_GetIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetIdentity(ctx, req.(*GetIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_ListTenants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).ListTenants(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_CreateTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_DeleteTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteTenant(ctx, req.(*DeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_LoadUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DirectoryServer).LoadUsers(&grpc.GenericServerStream[LoadUsersRequest, LoadUsersResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Directory_LoadUsersServer = grpc.ClientStreamingServer[LoadUsersRequest, LoadUsersResponse]

func _Directory_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).ListResources(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_SetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetResource(ctx, req.(*SetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_GetUserProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetUserProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_GetUserProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetUserProperties(ctx, req.(*GetUserPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetUserProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetUserProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_SetUserProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetUserProperties(ctx, req.(*SetUserPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetUserProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetUserProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_SetUserProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetUserProperty(ctx, req.(*SetUserPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteUserProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteUserProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_DeleteUserProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteUserProperty(ctx, req.(*DeleteUserPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_GetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_GetUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetUserRoles(ctx, req.(*GetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetUserRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetUserRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_SetUserRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetUserRoles(ctx, req.(*SetUserRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_SetUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetUserRole(ctx, req.(*SetUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_DeleteUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteUserRole(ctx, req.(*DeleteUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_GetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_GetUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetUserPermissions(ctx, req.(*GetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_SetUserPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetUserPermissions(ctx, req.(*SetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_SetUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetUserPermission(ctx, req.(*SetUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_DeleteUserPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteUserPermission(ctx, req.(*DeleteUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_ListUserApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).ListUserApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_ListUserApplications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).ListUserApplications(ctx, req.(*ListUserApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteUserApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteUserApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_DeleteUserApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteUserApplication(ctx, req.(*DeleteUserApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_GetApplProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetApplProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_GetApplProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetApplProperties(ctx, req.(*GetApplPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetApplProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetApplProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_SetApplProperties_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetApplProperties(ctx, req.(*SetApplPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetApplProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetApplProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_SetApplProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetApplProperty(ctx, req.(*SetApplPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteApplProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteApplProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_DeleteApplProperty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteApplProperty(ctx, req.(*DeleteApplPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_GetApplRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetApplRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_GetApplRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetApplRoles(ctx, req.(*GetApplRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetApplRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetApplRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_SetApplRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetApplRoles(ctx, req.(*SetApplRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetApplRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetApplRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_SetApplRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetApplRole(ctx, req.(*SetApplRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteApplRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteApplRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_DeleteApplRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteApplRole(ctx, req.(*DeleteApplRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_GetApplPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetApplPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_GetApplPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetApplPermissions(ctx, req.(*GetApplPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetApplPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetApplPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_SetApplPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetApplPermissions(ctx, req.(*SetApplPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_SetApplPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).SetApplPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_SetApplPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).SetApplPermission(ctx, req.(*SetApplPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteApplPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteApplPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_DeleteApplPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteApplPermission(ctx, req.(*DeleteApplPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetValue(ctx, req.(*GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Directory_ServiceDesc is the grpc.ServiceDesc for Directory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Directory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aserto.authorizer.directory.v1.Directory",
	HandlerType: (*DirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsers",
			Handler:    _Directory_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Directory_GetUser_Handler,
		},
		{
			MethodName: "GetIdentity",
			Handler:    _Directory_GetIdentity_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Directory_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Directory_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Directory_DeleteUser_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _Directory_ListTenants_Handler,
		},
		{
			MethodName: "CreateTenant",
			Handler:    _Directory_CreateTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _Directory_DeleteTenant_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _Directory_ListResources_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _Directory_GetResource_Handler,
		},
		{
			MethodName: "SetResource",
			Handler:    _Directory_SetResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _Directory_DeleteResource_Handler,
		},
		{
			MethodName: "GetUserProperties",
			Handler:    _Directory_GetUserProperties_Handler,
		},
		{
			MethodName: "SetUserProperties",
			Handler:    _Directory_SetUserProperties_Handler,
		},
		{
			MethodName: "SetUserProperty",
			Handler:    _Directory_SetUserProperty_Handler,
		},
		{
			MethodName: "DeleteUserProperty",
			Handler:    _Directory_DeleteUserProperty_Handler,
		},
		{
			MethodName: "GetUserRoles",
			Handler:    _Directory_GetUserRoles_Handler,
		},
		{
			MethodName: "SetUserRoles",
			Handler:    _Directory_SetUserRoles_Handler,
		},
		{
			MethodName: "SetUserRole",
			Handler:    _Directory_SetUserRole_Handler,
		},
		{
			MethodName: "DeleteUserRole",
			Handler:    _Directory_DeleteUserRole_Handler,
		},
		{
			MethodName: "GetUserPermissions",
			Handler:    _Directory_GetUserPermissions_Handler,
		},
		{
			MethodName: "SetUserPermissions",
			Handler:    _Directory_SetUserPermissions_Handler,
		},
		{
			MethodName: "SetUserPermission",
			Handler:    _Directory_SetUserPermission_Handler,
		},
		{
			MethodName: "DeleteUserPermission",
			Handler:    _Directory_DeleteUserPermission_Handler,
		},
		{
			MethodName: "ListUserApplications",
			Handler:    _Directory_ListUserApplications_Handler,
		},
		{
			MethodName: "DeleteUserApplication",
			Handler:    _Directory_DeleteUserApplication_Handler,
		},
		{
			MethodName: "GetApplProperties",
			Handler:    _Directory_GetApplProperties_Handler,
		},
		{
			MethodName: "SetApplProperties",
			Handler:    _Directory_SetApplProperties_Handler,
		},
		{
			MethodName: "SetApplProperty",
			Handler:    _Directory_SetApplProperty_Handler,
		},
		{
			MethodName: "DeleteApplProperty",
			Handler:    _Directory_DeleteApplProperty_Handler,
		},
		{
			MethodName: "GetApplRoles",
			Handler:    _Directory_GetApplRoles_Handler,
		},
		{
			MethodName: "SetApplRoles",
			Handler:    _Directory_SetApplRoles_Handler,
		},
		{
			MethodName: "SetApplRole",
			Handler:    _Directory_SetApplRole_Handler,
		},
		{
			MethodName: "DeleteApplRole",
			Handler:    _Directory_DeleteApplRole_Handler,
		},
		{
			MethodName: "GetApplPermissions",
			Handler:    _Directory_GetApplPermissions_Handler,
		},
		{
			MethodName: "SetApplPermissions",
			Handler:    _Directory_SetApplPermissions_Handler,
		},
		{
			MethodName: "SetApplPermission",
			Handler:    _Directory_SetApplPermission_Handler,
		},
		{
			MethodName: "DeleteApplPermission",
			Handler:    _Directory_DeleteApplPermission_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _Directory_GetValue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadUsers",
			Handler:       _Directory_LoadUsers_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "aserto/authorizer/directory/v1/directory.proto",
}
