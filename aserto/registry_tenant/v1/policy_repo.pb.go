// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        (unknown)
// source: aserto/registry_tenant/v1/policy_repo.proto

package registry_tenant

import (
	v1 "github.com/aserto-dev/go-grpc/aserto/api/v1"
	_ "github.com/aserto-dev/go-grpc/aserto/options/v1"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetPolicyRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPolicyRepoRequest) Reset() {
	*x = GetPolicyRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyRepoRequest) ProtoMessage() {}

func (x *GetPolicyRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyRepoRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyRepoRequest) Descriptor() ([]byte, []int) {
	return file_aserto_registry_tenant_v1_policy_repo_proto_rawDescGZIP(), []int{0}
}

func (x *GetPolicyRepoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPolicyRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy *v1.PolicyRepo `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (x *GetPolicyRepoResponse) Reset() {
	*x = GetPolicyRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyRepoResponse) ProtoMessage() {}

func (x *GetPolicyRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyRepoResponse.ProtoReflect.Descriptor instead.
func (*GetPolicyRepoResponse) Descriptor() ([]byte, []int) {
	return file_aserto_registry_tenant_v1_policy_repo_proto_rawDescGZIP(), []int{1}
}

func (x *GetPolicyRepoResponse) GetPolicy() *v1.PolicyRepo {
	if x != nil {
		return x.Policy
	}
	return nil
}

type CreatePolicyRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyRepo *v1.PolicyRepo `protobuf:"bytes,1,opt,name=policy_repo,json=policyRepo,proto3" json:"policy_repo,omitempty"`
}

func (x *CreatePolicyRepoRequest) Reset() {
	*x = CreatePolicyRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyRepoRequest) ProtoMessage() {}

func (x *CreatePolicyRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyRepoRequest.ProtoReflect.Descriptor instead.
func (*CreatePolicyRepoRequest) Descriptor() ([]byte, []int) {
	return file_aserto_registry_tenant_v1_policy_repo_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePolicyRepoRequest) GetPolicyRepo() *v1.PolicyRepo {
	if x != nil {
		return x.PolicyRepo
	}
	return nil
}

type CreatePolicyRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreatePolicyRepoResponse) Reset() {
	*x = CreatePolicyRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyRepoResponse) ProtoMessage() {}

func (x *CreatePolicyRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyRepoResponse.ProtoReflect.Descriptor instead.
func (*CreatePolicyRepoResponse) Descriptor() ([]byte, []int) {
	return file_aserto_registry_tenant_v1_policy_repo_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePolicyRepoResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListPolicyReposRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListPolicyReposRequest) Reset() {
	*x = ListPolicyReposRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPolicyReposRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPolicyReposRequest) ProtoMessage() {}

func (x *ListPolicyReposRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPolicyReposRequest.ProtoReflect.Descriptor instead.
func (*ListPolicyReposRequest) Descriptor() ([]byte, []int) {
	return file_aserto_registry_tenant_v1_policy_repo_proto_rawDescGZIP(), []int{4}
}

func (x *ListPolicyReposRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListPolicyReposResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*v1.PolicyRepo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListPolicyReposResponse) Reset() {
	*x = ListPolicyReposResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPolicyReposResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPolicyReposResponse) ProtoMessage() {}

func (x *ListPolicyReposResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPolicyReposResponse.ProtoReflect.Descriptor instead.
func (*ListPolicyReposResponse) Descriptor() ([]byte, []int) {
	return file_aserto_registry_tenant_v1_policy_repo_proto_rawDescGZIP(), []int{5}
}

func (x *ListPolicyReposResponse) GetResults() []*v1.PolicyRepo {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListPublicPolicyReposRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPublicPolicyReposRequest) Reset() {
	*x = ListPublicPolicyReposRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicPolicyReposRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicPolicyReposRequest) ProtoMessage() {}

func (x *ListPublicPolicyReposRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicPolicyReposRequest.ProtoReflect.Descriptor instead.
func (*ListPublicPolicyReposRequest) Descriptor() ([]byte, []int) {
	return file_aserto_registry_tenant_v1_policy_repo_proto_rawDescGZIP(), []int{6}
}

type ListPublicPolicyReposResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*v1.PolicyRepo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ListPublicPolicyReposResponse) Reset() {
	*x = ListPublicPolicyReposResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicPolicyReposResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicPolicyReposResponse) ProtoMessage() {}

func (x *ListPublicPolicyReposResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicPolicyReposResponse.ProtoReflect.Descriptor instead.
func (*ListPublicPolicyReposResponse) Descriptor() ([]byte, []int) {
	return file_aserto_registry_tenant_v1_policy_repo_proto_rawDescGZIP(), []int{7}
}

func (x *ListPublicPolicyReposResponse) GetResults() []*v1.PolicyRepo {
	if x != nil {
		return x.Results
	}
	return nil
}

type DeletePolicyRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeletePolicyRepoRequest) Reset() {
	*x = DeletePolicyRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyRepoRequest) ProtoMessage() {}

func (x *DeletePolicyRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyRepoRequest.ProtoReflect.Descriptor instead.
func (*DeletePolicyRepoRequest) Descriptor() ([]byte, []int) {
	return file_aserto_registry_tenant_v1_policy_repo_proto_rawDescGZIP(), []int{8}
}

func (x *DeletePolicyRepoRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeletePolicyRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *emptypb.Empty `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DeletePolicyRepoResponse) Reset() {
	*x = DeletePolicyRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyRepoResponse) ProtoMessage() {}

func (x *DeletePolicyRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyRepoResponse.ProtoReflect.Descriptor instead.
func (*DeletePolicyRepoResponse) Descriptor() ([]byte, []int) {
	return file_aserto_registry_tenant_v1_policy_repo_proto_rawDescGZIP(), []int{9}
}

func (x *DeletePolicyRepoResponse) GetResult() *emptypb.Empty {
	if x != nil {
		return x.Result
	}
	return nil
}

type UpdatePolicyRepoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyRepo *v1.PolicyRepo `protobuf:"bytes,1,opt,name=policy_repo,json=policyRepo,proto3" json:"policy_repo,omitempty"`
}

func (x *UpdatePolicyRepoRequest) Reset() {
	*x = UpdatePolicyRepoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePolicyRepoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePolicyRepoRequest) ProtoMessage() {}

func (x *UpdatePolicyRepoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePolicyRepoRequest.ProtoReflect.Descriptor instead.
func (*UpdatePolicyRepoRequest) Descriptor() ([]byte, []int) {
	return file_aserto_registry_tenant_v1_policy_repo_proto_rawDescGZIP(), []int{10}
}

func (x *UpdatePolicyRepoRequest) GetPolicyRepo() *v1.PolicyRepo {
	if x != nil {
		return x.PolicyRepo
	}
	return nil
}

type UpdatePolicyRepoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results *emptypb.Empty `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`
}

func (x *UpdatePolicyRepoResponse) Reset() {
	*x = UpdatePolicyRepoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePolicyRepoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePolicyRepoResponse) ProtoMessage() {}

func (x *UpdatePolicyRepoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePolicyRepoResponse.ProtoReflect.Descriptor instead.
func (*UpdatePolicyRepoResponse) Descriptor() ([]byte, []int) {
	return file_aserto_registry_tenant_v1_policy_repo_proto_rawDescGZIP(), []int{11}
}

func (x *UpdatePolicyRepoResponse) GetResults() *emptypb.Empty {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_aserto_registry_tenant_v1_policy_repo_proto protoreflect.FileDescriptor

var file_aserto_registry_tenant_v1_policy_repo_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x61,
	0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x55, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x22, 0x30, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x0a, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c,
	0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x1e, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x1d,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x2f, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x90, 0xb5, 0x18, 0x0a, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x55, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x22, 0x4c, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x32, 0xb5, 0x0d, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x12, 0x9c, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x2f, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa7, 0x01, 0x92, 0x41, 0x82, 0x01, 0x0a,
	0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x0e, 0x47, 0x65,
	0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x20, 0x62, 0x79, 0x20, 0x69, 0x64, 0x1a, 0x2c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x72,
	0x65, 0x70, 0x6f, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x64, 0x2e, 0x2a, 0x1c, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x62, 0x17, 0x0a, 0x07, 0x0a, 0x03, 0x4a, 0x57,
	0x54, 0x12, 0x00, 0x0a, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x83, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x31, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x73, 0x65, 0x72,
	0x74, 0x6f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x88, 0x01,
	0x92, 0x41, 0x69, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x12, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x1a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x20, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2e, 0x2a, 0x1a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x62, 0x17, 0x0a, 0x07, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x12, 0x00, 0x0a, 0x0c,
	0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x12, 0xb1, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x12, 0x37, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x73,
	0x65, 0x72, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x92, 0x41, 0x7e, 0x0a, 0x0b, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x1a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2e, 0x2a, 0x21, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x62, 0x17, 0x0a, 0x07, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x12, 0x00, 0x0a, 0x0c, 0x0a, 0x08, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12,
	0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x94, 0x02, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70,
	0x6f, 0x12, 0x32, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x96, 0x01, 0x92, 0x41, 0x6a,
	0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x72, 0x65, 0x70,
	0x6f, 0x1a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x20, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x2a, 0x19, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x62, 0x17, 0x0a, 0x07, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x12, 0x00, 0x0a, 0x0c, 0x0a, 0x08,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x3a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x14, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x12, 0x8a, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x32, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74,
	0x6f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61,
	0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8c, 0x01, 0x92, 0x41, 0x68, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x12, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x20, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x1a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x2a, 0x17, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x62, 0x17, 0x0a, 0x07, 0x0a, 0x03, 0x4a, 0x57, 0x54, 0x12,
	0x00, 0x0a, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0xa9, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x32, 0x2e, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x70, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x73, 0x65, 0x72,
	0x74, 0x6f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab,
	0x01, 0x92, 0x41, 0x6e, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x12, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x1a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
	0x61, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x2a, 0x19,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x62, 0x17, 0x0a, 0x07, 0x0a, 0x03, 0x4a,
	0x57, 0x54, 0x12, 0x00, 0x0a, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x3a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x32, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x2e, 0x69, 0x64, 0x7d, 0x42, 0xea, 0x01, 0x92,
	0x41, 0x82, 0x01, 0x2a, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x40, 0x0a, 0x1a, 0x0a, 0x03,
	0x4a, 0x57, 0x54, 0x12, 0x13, 0x08, 0x02, 0x1a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x0a, 0x22, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x08, 0x02, 0x1a, 0x10, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f,
	0x2d, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x69, 0x64, 0x20, 0x02, 0x62, 0x17, 0x0a, 0x07,
	0x0a, 0x03, 0x4a, 0x57, 0x54, 0x12, 0x00, 0x0a, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x00, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x67, 0x6f, 0x2d,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x61, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0xaa, 0x02,
	0x18, 0x41, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_aserto_registry_tenant_v1_policy_repo_proto_rawDescOnce sync.Once
	file_aserto_registry_tenant_v1_policy_repo_proto_rawDescData = file_aserto_registry_tenant_v1_policy_repo_proto_rawDesc
)

func file_aserto_registry_tenant_v1_policy_repo_proto_rawDescGZIP() []byte {
	file_aserto_registry_tenant_v1_policy_repo_proto_rawDescOnce.Do(func() {
		file_aserto_registry_tenant_v1_policy_repo_proto_rawDescData = protoimpl.X.CompressGZIP(file_aserto_registry_tenant_v1_policy_repo_proto_rawDescData)
	})
	return file_aserto_registry_tenant_v1_policy_repo_proto_rawDescData
}

var file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_aserto_registry_tenant_v1_policy_repo_proto_goTypes = []interface{}{
	(*GetPolicyRepoRequest)(nil),          // 0: aserto.registry_tenant.v1.GetPolicyRepoRequest
	(*GetPolicyRepoResponse)(nil),         // 1: aserto.registry_tenant.v1.GetPolicyRepoResponse
	(*CreatePolicyRepoRequest)(nil),       // 2: aserto.registry_tenant.v1.CreatePolicyRepoRequest
	(*CreatePolicyRepoResponse)(nil),      // 3: aserto.registry_tenant.v1.CreatePolicyRepoResponse
	(*ListPolicyReposRequest)(nil),        // 4: aserto.registry_tenant.v1.ListPolicyReposRequest
	(*ListPolicyReposResponse)(nil),       // 5: aserto.registry_tenant.v1.ListPolicyReposResponse
	(*ListPublicPolicyReposRequest)(nil),  // 6: aserto.registry_tenant.v1.ListPublicPolicyReposRequest
	(*ListPublicPolicyReposResponse)(nil), // 7: aserto.registry_tenant.v1.ListPublicPolicyReposResponse
	(*DeletePolicyRepoRequest)(nil),       // 8: aserto.registry_tenant.v1.DeletePolicyRepoRequest
	(*DeletePolicyRepoResponse)(nil),      // 9: aserto.registry_tenant.v1.DeletePolicyRepoResponse
	(*UpdatePolicyRepoRequest)(nil),       // 10: aserto.registry_tenant.v1.UpdatePolicyRepoRequest
	(*UpdatePolicyRepoResponse)(nil),      // 11: aserto.registry_tenant.v1.UpdatePolicyRepoResponse
	(*v1.PolicyRepo)(nil),                 // 12: aserto.api.v1.PolicyRepo
	(*emptypb.Empty)(nil),                 // 13: google.protobuf.Empty
}
var file_aserto_registry_tenant_v1_policy_repo_proto_depIdxs = []int32{
	12, // 0: aserto.registry_tenant.v1.GetPolicyRepoResponse.policy:type_name -> aserto.api.v1.PolicyRepo
	12, // 1: aserto.registry_tenant.v1.CreatePolicyRepoRequest.policy_repo:type_name -> aserto.api.v1.PolicyRepo
	12, // 2: aserto.registry_tenant.v1.ListPolicyReposResponse.results:type_name -> aserto.api.v1.PolicyRepo
	12, // 3: aserto.registry_tenant.v1.ListPublicPolicyReposResponse.results:type_name -> aserto.api.v1.PolicyRepo
	13, // 4: aserto.registry_tenant.v1.DeletePolicyRepoResponse.result:type_name -> google.protobuf.Empty
	12, // 5: aserto.registry_tenant.v1.UpdatePolicyRepoRequest.policy_repo:type_name -> aserto.api.v1.PolicyRepo
	13, // 6: aserto.registry_tenant.v1.UpdatePolicyRepoResponse.results:type_name -> google.protobuf.Empty
	0,  // 7: aserto.registry_tenant.v1.PolicyRepo.GetPolicyRepo:input_type -> aserto.registry_tenant.v1.GetPolicyRepoRequest
	4,  // 8: aserto.registry_tenant.v1.PolicyRepo.ListPolicyRepos:input_type -> aserto.registry_tenant.v1.ListPolicyReposRequest
	6,  // 9: aserto.registry_tenant.v1.PolicyRepo.ListPublicPolicyRepos:input_type -> aserto.registry_tenant.v1.ListPublicPolicyReposRequest
	2,  // 10: aserto.registry_tenant.v1.PolicyRepo.CreatePolicyRepo:input_type -> aserto.registry_tenant.v1.CreatePolicyRepoRequest
	8,  // 11: aserto.registry_tenant.v1.PolicyRepo.DeletePolicyRepo:input_type -> aserto.registry_tenant.v1.DeletePolicyRepoRequest
	10, // 12: aserto.registry_tenant.v1.PolicyRepo.UpdatePolicyRepo:input_type -> aserto.registry_tenant.v1.UpdatePolicyRepoRequest
	1,  // 13: aserto.registry_tenant.v1.PolicyRepo.GetPolicyRepo:output_type -> aserto.registry_tenant.v1.GetPolicyRepoResponse
	5,  // 14: aserto.registry_tenant.v1.PolicyRepo.ListPolicyRepos:output_type -> aserto.registry_tenant.v1.ListPolicyReposResponse
	7,  // 15: aserto.registry_tenant.v1.PolicyRepo.ListPublicPolicyRepos:output_type -> aserto.registry_tenant.v1.ListPublicPolicyReposResponse
	3,  // 16: aserto.registry_tenant.v1.PolicyRepo.CreatePolicyRepo:output_type -> aserto.registry_tenant.v1.CreatePolicyRepoResponse
	9,  // 17: aserto.registry_tenant.v1.PolicyRepo.DeletePolicyRepo:output_type -> aserto.registry_tenant.v1.DeletePolicyRepoResponse
	11, // 18: aserto.registry_tenant.v1.PolicyRepo.UpdatePolicyRepo:output_type -> aserto.registry_tenant.v1.UpdatePolicyRepoResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_aserto_registry_tenant_v1_policy_repo_proto_init() }
func file_aserto_registry_tenant_v1_policy_repo_proto_init() {
	if File_aserto_registry_tenant_v1_policy_repo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPolicyReposRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPolicyReposResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPublicPolicyReposRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPublicPolicyReposResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePolicyRepoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePolicyRepoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aserto_registry_tenant_v1_policy_repo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aserto_registry_tenant_v1_policy_repo_proto_goTypes,
		DependencyIndexes: file_aserto_registry_tenant_v1_policy_repo_proto_depIdxs,
		MessageInfos:      file_aserto_registry_tenant_v1_policy_repo_proto_msgTypes,
	}.Build()
	File_aserto_registry_tenant_v1_policy_repo_proto = out.File
	file_aserto_registry_tenant_v1_policy_repo_proto_rawDesc = nil
	file_aserto_registry_tenant_v1_policy_repo_proto_goTypes = nil
	file_aserto_registry_tenant_v1_policy_repo_proto_depIdxs = nil
}
