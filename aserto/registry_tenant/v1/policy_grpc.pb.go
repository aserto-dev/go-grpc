// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: aserto/registry_tenant/v1/policy.proto

package registry_tenant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Policy_GetPolicyImage_FullMethodName         = "/aserto.registry_tenant.v1.Policy/GetPolicyImage"
	Policy_ListPolicyImages_FullMethodName       = "/aserto.registry_tenant.v1.Policy/ListPolicyImages"
	Policy_ListPublicPolicyImages_FullMethodName = "/aserto.registry_tenant.v1.Policy/ListPublicPolicyImages"
	Policy_CreatePolicyImage_FullMethodName      = "/aserto.registry_tenant.v1.Policy/CreatePolicyImage"
	Policy_DeletePolicyImage_FullMethodName      = "/aserto.registry_tenant.v1.Policy/DeletePolicyImage"
	Policy_UpdatePolicyImage_FullMethodName      = "/aserto.registry_tenant.v1.Policy/UpdatePolicyImage"
)

// PolicyClient is the client API for Policy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyClient interface {
	GetPolicyImage(ctx context.Context, in *GetPolicyImageRequest, opts ...grpc.CallOption) (*GetPolicyImageResponse, error)
	ListPolicyImages(ctx context.Context, in *ListPolicyImagesRequest, opts ...grpc.CallOption) (*ListPolicyImagesResponse, error)
	ListPublicPolicyImages(ctx context.Context, in *ListPublicPolicyImagesRequest, opts ...grpc.CallOption) (*ListPublicPolicyImagesResponse, error)
	CreatePolicyImage(ctx context.Context, in *CreatePolicyImageRequest, opts ...grpc.CallOption) (*CreatePolicyImageResponse, error)
	DeletePolicyImage(ctx context.Context, in *DeletePolicyImageRequest, opts ...grpc.CallOption) (*DeletePolicyImageResponse, error)
	UpdatePolicyImage(ctx context.Context, in *UpdatePolicyImageRequest, opts ...grpc.CallOption) (*UpdatePolicyImageResponse, error)
}

type policyClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyClient(cc grpc.ClientConnInterface) PolicyClient {
	return &policyClient{cc}
}

func (c *policyClient) GetPolicyImage(ctx context.Context, in *GetPolicyImageRequest, opts ...grpc.CallOption) (*GetPolicyImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPolicyImageResponse)
	err := c.cc.Invoke(ctx, Policy_GetPolicyImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyClient) ListPolicyImages(ctx context.Context, in *ListPolicyImagesRequest, opts ...grpc.CallOption) (*ListPolicyImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPolicyImagesResponse)
	err := c.cc.Invoke(ctx, Policy_ListPolicyImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyClient) ListPublicPolicyImages(ctx context.Context, in *ListPublicPolicyImagesRequest, opts ...grpc.CallOption) (*ListPublicPolicyImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPublicPolicyImagesResponse)
	err := c.cc.Invoke(ctx, Policy_ListPublicPolicyImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyClient) CreatePolicyImage(ctx context.Context, in *CreatePolicyImageRequest, opts ...grpc.CallOption) (*CreatePolicyImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePolicyImageResponse)
	err := c.cc.Invoke(ctx, Policy_CreatePolicyImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyClient) DeletePolicyImage(ctx context.Context, in *DeletePolicyImageRequest, opts ...grpc.CallOption) (*DeletePolicyImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePolicyImageResponse)
	err := c.cc.Invoke(ctx, Policy_DeletePolicyImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyClient) UpdatePolicyImage(ctx context.Context, in *UpdatePolicyImageRequest, opts ...grpc.CallOption) (*UpdatePolicyImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePolicyImageResponse)
	err := c.cc.Invoke(ctx, Policy_UpdatePolicyImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyServer is the server API for Policy service.
// All implementations should embed UnimplementedPolicyServer
// for forward compatibility.
type PolicyServer interface {
	GetPolicyImage(context.Context, *GetPolicyImageRequest) (*GetPolicyImageResponse, error)
	ListPolicyImages(context.Context, *ListPolicyImagesRequest) (*ListPolicyImagesResponse, error)
	ListPublicPolicyImages(context.Context, *ListPublicPolicyImagesRequest) (*ListPublicPolicyImagesResponse, error)
	CreatePolicyImage(context.Context, *CreatePolicyImageRequest) (*CreatePolicyImageResponse, error)
	DeletePolicyImage(context.Context, *DeletePolicyImageRequest) (*DeletePolicyImageResponse, error)
	UpdatePolicyImage(context.Context, *UpdatePolicyImageRequest) (*UpdatePolicyImageResponse, error)
}

// UnimplementedPolicyServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPolicyServer struct{}

func (UnimplementedPolicyServer) GetPolicyImage(context.Context, *GetPolicyImageRequest) (*GetPolicyImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicyImage not implemented")
}
func (UnimplementedPolicyServer) ListPolicyImages(context.Context, *ListPolicyImagesRequest) (*ListPolicyImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicyImages not implemented")
}
func (UnimplementedPolicyServer) ListPublicPolicyImages(context.Context, *ListPublicPolicyImagesRequest) (*ListPublicPolicyImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicPolicyImages not implemented")
}
func (UnimplementedPolicyServer) CreatePolicyImage(context.Context, *CreatePolicyImageRequest) (*CreatePolicyImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicyImage not implemented")
}
func (UnimplementedPolicyServer) DeletePolicyImage(context.Context, *DeletePolicyImageRequest) (*DeletePolicyImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicyImage not implemented")
}
func (UnimplementedPolicyServer) UpdatePolicyImage(context.Context, *UpdatePolicyImageRequest) (*UpdatePolicyImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicyImage not implemented")
}
func (UnimplementedPolicyServer) testEmbeddedByValue() {}

// UnsafePolicyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyServer will
// result in compilation errors.
type UnsafePolicyServer interface {
	mustEmbedUnimplementedPolicyServer()
}

func RegisterPolicyServer(s grpc.ServiceRegistrar, srv PolicyServer) {
	// If the following call pancis, it indicates UnimplementedPolicyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Policy_ServiceDesc, srv)
}

func _Policy_GetPolicyImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServer).GetPolicyImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Policy_GetPolicyImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServer).GetPolicyImage(ctx, req.(*GetPolicyImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policy_ListPolicyImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPolicyImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServer).ListPolicyImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Policy_ListPolicyImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServer).ListPolicyImages(ctx, req.(*ListPolicyImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policy_ListPublicPolicyImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicPolicyImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServer).ListPublicPolicyImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Policy_ListPublicPolicyImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServer).ListPublicPolicyImages(ctx, req.(*ListPublicPolicyImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policy_CreatePolicyImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePolicyImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServer).CreatePolicyImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Policy_CreatePolicyImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServer).CreatePolicyImage(ctx, req.(*CreatePolicyImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policy_DeletePolicyImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServer).DeletePolicyImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Policy_DeletePolicyImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServer).DeletePolicyImage(ctx, req.(*DeletePolicyImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policy_UpdatePolicyImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePolicyImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServer).UpdatePolicyImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Policy_UpdatePolicyImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServer).UpdatePolicyImage(ctx, req.(*UpdatePolicyImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Policy_ServiceDesc is the grpc.ServiceDesc for Policy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Policy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aserto.registry_tenant.v1.Policy",
	HandlerType: (*PolicyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPolicyImage",
			Handler:    _Policy_GetPolicyImage_Handler,
		},
		{
			MethodName: "ListPolicyImages",
			Handler:    _Policy_ListPolicyImages_Handler,
		},
		{
			MethodName: "ListPublicPolicyImages",
			Handler:    _Policy_ListPublicPolicyImages_Handler,
		},
		{
			MethodName: "CreatePolicyImage",
			Handler:    _Policy_CreatePolicyImage_Handler,
		},
		{
			MethodName: "DeletePolicyImage",
			Handler:    _Policy_DeletePolicyImage_Handler,
		},
		{
			MethodName: "UpdatePolicyImage",
			Handler:    _Policy_UpdatePolicyImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aserto/registry_tenant/v1/policy.proto",
}
